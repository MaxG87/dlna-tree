Eigentlich gesucht ist ein Baum, der nur Werte auf den Blättern hat und die
durchschnittliche Zugriffszeit minimiert. Hierbei ist eigentlich auch egal,
welchen Verzweigungsfaktor der Baum hat, solange er eben nur die
durchschnittliche Zugriffszeit minimiert. Leider ist momentan noch nicht klar,
wie dies formuliert werden kann. Deswegen werden mehrere Lösungsvorschläge
formuliert, die unterschiedliche Stärken und Schwächen haben.


===== Lösungsversuch 1 =====

In diesem Lösungsversuch wird nicht direkt versucht, die Zugriffszeiten zu
minimieren. Stattdessen wird ein einfacheres Platzhalterproblem gelöst, in der
Hoffnung, damit der Lösung näher zu kommen. Im Allgemeinen ist die so erzielte
Lösung jedoch nicht optimal.

==== Formulierung des Platzhalterproblems ====

  * Werte (Musikordner) nur in den Blättern
  * Verzweigungsfaktor == N (N fix)
  * Blätter alphabetisch sortiert
  * Sei w = Σ w_i die Summe der Einzelgewichte der Ordner. Seien c_i, i = 1…N,
    die Zugriffskosten (z.B. Tastendrücke) für die entsprechenden Teilbäume.
    Seien α_i, i = 1…N die Anteile am Gesamtgewicht, die in den einzelnen
    Teilbäumen liegen. Dann gilt:

      1) Σ α_i = 1
      2) ∀ i,j: α_i/α_j = (c_j)/(c_i)

Die obigen Bedingungen sind erfüllt durch:
    β_i = (c_i)^{-1} und
    α_i = β_i / Σ β_j.


==== Detailprobleme ====
Bei der Frage, wie viele Ordner noch in einen Teilbaum kommen, darf nicht
gierig aufgerundet werden. Dies wird deutlich an folgendem Beispiel:
  Sei [ε, ε, w, ε, ε] eine Liste von Gewichten. Sei c_1 = … = c_4 = 1. Dann
  ist der optimale Teilbaum [[ε, ε], w, ε, ε]. Bezüglich der obigen Formel
  jedoch müsste in den ersten Teilbaum der Anteil α_1 = 1/4. Mit Aufrundung
  ergäbe sich jedoch [[ε, ε, w], ε, ε] als Baum, was deutlich schlechter als
  nötig ist.
Es scheint jedoch, als ob mathematisches Runden unproblematisch ist und zu
besseren Bäumen führt, als striktes Abrunden.

Das obige Beispiel zeigt ein weiteres Problem auf. Momentan würde aus
[ε, ε, w, ε, ε] nämlich [[ε, ε], w, [ε, ε]] konstruiert, was nicht optimal
ist. Diesem Problem wird dadurch begegnet, dass die α_i reskaliert werden und
sich immer auf die noch verbleibenden Elemente beziehen.

Seien die Gewichte w = [ε, ε …, ε, w] und die Kosten c = [1, x, …, 1]. Dann
wäre die optimale Aufteilung [[ε, …], …, w]. Allerdings würde dies nicht
erreicht, wenn jeder Teilbaum gierig gefüllt würde. Dann ergäbe sich nämlich
[[ε, …], w]. Dies ist offensichtlich schlechter, da die Zugriffe auf die
ε-Elemente teurer werden, die für das w-Element sich jedoch nicht verändern.


===== Lösungsversuch 2 =====

Dieser Versuch soll nur kurz angerissen werden. Hier wurde versucht, effizient
aus einer Lösung für n-1 Elemente eine für n Elemente zu konstruieren. Dieser
Ansatz hat birgt mehrere Probleme:

    * nicht immer optimale Lösungen
    * nicht geeignet wenn ∃i,j w_i != w_j, da dann die dynamische
      Programmierung nicht mehr funktioniert.


===== Lösungsversuch 3 =====

Hier soll versucht werden, mittels Brute-Force eine beste Lösung zu
konstruieren. Das muss naturgemäß eine optimale Lösung ergeben, wobei unklar
ist, wie schnell diese gefunden werden kann.

Außerdem muss vielleicht die Stabilität extra beachtet werden, damit sich der
generierte Baum nicht von Nacht zu Nacht ändert.
